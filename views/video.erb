<div class="row"> 
    <div class="col-md-12">
    <!--button class="btn btn-default" # "onclick=\"player.loadVideoById('" + @video.link.to_s.slice(/[A-Z|0-9]{10,12}/i) + "', 0, 'large');\"" >Watch</button-->
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div>
      <h1 id="videoTitle"></h1>
    </div>
    <div id="player"></div>
    <br clear="all">
    <form role="form" id="myform" action="#" method="POST">
      <div class="form-group">
        <label for="comment">Comment:</label>
        <input type="text" class="form-control col-md-3" id="comment" name="comment[comment]">
      </div>
      <button type="submit" class="btn btn-default">Submit</button>
    </form>
    <div>
        <%@comments.each do |comment| %>
        <br clear="all">
        <p><%= comment.comment %> </p>
        <hr>
        <% end %>
    </div>
  </div>
    
    
    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      <% @video.each do |vid| %>
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: '<%=vid.link.to_s.slice(/[A-Z|0-9]{10,12}/i) %>',
           <% puts vid.link.to_s.slice(/[A-Z|0-9]{10,12}/i) %>
           <% end %>
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        document.getElementById("videoTitle").innerHTML = player.getVideoData().title;
         //setTimeout(stopVideo, 6000);
         //done = true;
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
</div>